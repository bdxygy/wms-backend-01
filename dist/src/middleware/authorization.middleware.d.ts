import { Permission, Resource, Action } from "../services/authorization.service";
import type { Applications } from "../http/hono";
export declare const requirePermission: (permission: Permission) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireResourceAccess: (resource: Resource, action: Action) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireOwnerScope: (ownerIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireUserAccess: (userIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireStoreAccess: (storeIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireCategoryAccess: (categoryIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireProductAccess: (productIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireTransactionAccess: (transactionIdExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireRoleHierarchy: (targetRoleExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireOwnerRole: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireOwnerOrAdmin: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireMinRole: (minRole: "OWNER" | "ADMIN" | "STAFF" | "CASHIER") => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireTransactionType: (transactionTypeExtractor: (c: any) => string) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const createPermissionMiddleware: (permission: Permission) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const createResourceMiddleware: (resource: Resource, action: Action) => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const extractParamId: (paramName: string) => (c: any) => any;
export declare const extractBodyField: (fieldName: string) => (c: any) => any;
export declare const extractQueryField: (fieldName: string) => (c: any) => any;
export declare const requireUserManagement: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireStoreManagement: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireProductManagement: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireTransactionManagement: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireAdminCanOnlyCreateStaff: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireAdminCanOnlySetStaffRole: () => import("hono").MiddlewareHandler<Applications, string, {}>;
export declare const requireStaffCannotCreateUsers: () => import("hono").MiddlewareHandler<Applications, string, {}>;
//# sourceMappingURL=authorization.middleware.d.ts.map