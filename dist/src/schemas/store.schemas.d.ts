import { z } from "zod";
export declare const createStoreSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodString;
    addressLine1: z.ZodString;
    addressLine2: z.ZodOptional<z.ZodString>;
    city: z.ZodString;
    province: z.ZodString;
    postalCode: z.ZodString;
    country: z.ZodString;
    phoneNumber: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
    openTime: z.ZodOptional<z.ZodString>;
    closeTime: z.ZodOptional<z.ZodString>;
    timezone: z.ZodOptional<z.ZodString>;
    mapLocation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: string;
    name: string;
    addressLine1: string;
    city: string;
    province: string;
    postalCode: string;
    country: string;
    phoneNumber: string;
    addressLine2?: string | undefined;
    email?: string | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    timezone?: string | undefined;
    mapLocation?: string | undefined;
}, {
    type: string;
    name: string;
    addressLine1: string;
    city: string;
    province: string;
    postalCode: string;
    country: string;
    phoneNumber: string;
    addressLine2?: string | undefined;
    email?: string | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    timezone?: string | undefined;
    mapLocation?: string | undefined;
}>;
export declare const updateStoreSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    addressLine1: z.ZodOptional<z.ZodString>;
    addressLine2: z.ZodOptional<z.ZodString>;
    city: z.ZodOptional<z.ZodString>;
    province: z.ZodOptional<z.ZodString>;
    postalCode: z.ZodOptional<z.ZodString>;
    country: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    isActive: z.ZodOptional<z.ZodBoolean>;
    openTime: z.ZodOptional<z.ZodString>;
    closeTime: z.ZodOptional<z.ZodString>;
    timezone: z.ZodOptional<z.ZodString>;
    mapLocation: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type?: string | undefined;
    name?: string | undefined;
    isActive?: boolean | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    timezone?: string | undefined;
    mapLocation?: string | undefined;
}, {
    type?: string | undefined;
    name?: string | undefined;
    isActive?: boolean | undefined;
    addressLine1?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    postalCode?: string | undefined;
    country?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    openTime?: string | undefined;
    closeTime?: string | undefined;
    timezone?: string | undefined;
    mapLocation?: string | undefined;
}>;
export declare const listStoresQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    search: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    isActive: z.ZodOptional<z.ZodBoolean>;
    city: z.ZodOptional<z.ZodString>;
    province: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    limit: number;
    page: number;
    type?: string | undefined;
    search?: string | undefined;
    isActive?: boolean | undefined;
    city?: string | undefined;
    province?: string | undefined;
}, {
    type?: string | undefined;
    search?: string | undefined;
    isActive?: boolean | undefined;
    city?: string | undefined;
    province?: string | undefined;
    limit?: number | undefined;
    page?: number | undefined;
}>;
export declare const storeIdParamSchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export declare const storeResponseSchema: z.ZodObject<{
    id: z.ZodString;
    ownerId: z.ZodString;
    name: z.ZodString;
    type: z.ZodString;
    addressLine1: z.ZodString;
    addressLine2: z.ZodNullable<z.ZodString>;
    city: z.ZodString;
    province: z.ZodString;
    postalCode: z.ZodString;
    country: z.ZodString;
    phoneNumber: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    isActive: z.ZodBoolean;
    openTime: z.ZodNullable<z.ZodString>;
    closeTime: z.ZodNullable<z.ZodString>;
    timezone: z.ZodNullable<z.ZodString>;
    mapLocation: z.ZodNullable<z.ZodString>;
    createdBy: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    id: string;
    ownerId: string;
    name: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    addressLine1: string;
    addressLine2: string | null;
    city: string;
    province: string;
    postalCode: string;
    country: string;
    phoneNumber: string;
    email: string | null;
    openTime: string | null;
    closeTime: string | null;
    timezone: string | null;
    mapLocation: string | null;
    createdBy: string;
}, {
    type: string;
    id: string;
    ownerId: string;
    name: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string;
    addressLine1: string;
    addressLine2: string | null;
    city: string;
    province: string;
    postalCode: string;
    country: string;
    phoneNumber: string;
    email: string | null;
    openTime: string | null;
    closeTime: string | null;
    timezone: string | null;
    mapLocation: string | null;
    createdBy: string;
}>;
export declare const storeListResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    data: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        ownerId: z.ZodString;
        name: z.ZodString;
        type: z.ZodString;
        addressLine1: z.ZodString;
        addressLine2: z.ZodNullable<z.ZodString>;
        city: z.ZodString;
        province: z.ZodString;
        postalCode: z.ZodString;
        country: z.ZodString;
        phoneNumber: z.ZodString;
        email: z.ZodNullable<z.ZodString>;
        isActive: z.ZodBoolean;
        openTime: z.ZodNullable<z.ZodString>;
        closeTime: z.ZodNullable<z.ZodString>;
        timezone: z.ZodNullable<z.ZodString>;
        mapLocation: z.ZodNullable<z.ZodString>;
        createdBy: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: string;
        ownerId: string;
        name: string;
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        province: string;
        postalCode: string;
        country: string;
        phoneNumber: string;
        email: string | null;
        openTime: string | null;
        closeTime: string | null;
        timezone: string | null;
        mapLocation: string | null;
        createdBy: string;
    }, {
        type: string;
        id: string;
        ownerId: string;
        name: string;
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        province: string;
        postalCode: string;
        country: string;
        phoneNumber: string;
        email: string | null;
        openTime: string | null;
        closeTime: string | null;
        timezone: string | null;
        mapLocation: string | null;
        createdBy: string;
    }>, "many">;
    pagination: z.ZodObject<{
        page: z.ZodNumber;
        limit: z.ZodNumber;
        total: z.ZodNumber;
        totalPages: z.ZodNumber;
        hasNext: z.ZodBoolean;
        hasPrev: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        limit: number;
        page: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }, {
        limit: number;
        page: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    }>;
    timestamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: {
        type: string;
        id: string;
        ownerId: string;
        name: string;
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        province: string;
        postalCode: string;
        country: string;
        phoneNumber: string;
        email: string | null;
        openTime: string | null;
        closeTime: string | null;
        timezone: string | null;
        mapLocation: string | null;
        createdBy: string;
    }[];
    timestamp: string;
    success: boolean;
    pagination: {
        limit: number;
        page: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
}, {
    data: {
        type: string;
        id: string;
        ownerId: string;
        name: string;
        isActive: boolean;
        createdAt: string;
        updatedAt: string;
        addressLine1: string;
        addressLine2: string | null;
        city: string;
        province: string;
        postalCode: string;
        country: string;
        phoneNumber: string;
        email: string | null;
        openTime: string | null;
        closeTime: string | null;
        timezone: string | null;
        mapLocation: string | null;
        createdBy: string;
    }[];
    timestamp: string;
    success: boolean;
    pagination: {
        limit: number;
        page: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
    };
}>;
export type CreateStoreRequest = z.infer<typeof createStoreSchema>;
export type UpdateStoreRequest = z.infer<typeof updateStoreSchema>;
export type ListStoresQuery = z.infer<typeof listStoresQuerySchema>;
export type StoreIdParam = z.infer<typeof storeIdParamSchema>;
export type StoreResponse = z.infer<typeof storeResponseSchema>;
//# sourceMappingURL=store.schemas.d.ts.map